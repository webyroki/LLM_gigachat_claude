import os
import asyncio
import json
import logging
from datetime import datetime
from dotenv import load_dotenv
from langchain_gigachat.chat_models import GigaChat
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_mcp_adapters.client import MultiServerMCPClient
from langgraph.prebuilt import create_react_agent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_dir = os.getenv('LOGS_PATH', './logs')
    os.makedirs(log_dir, exist_ok=True)
    
    log_file = os.path.join(log_dir, f"agent_{datetime.now().strftime('%Y%m%d')}.log")
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logger = setup_logging()

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞
        with open('rules.json', encoding='utf-8') as f:
            rules = json.load(f)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
        with open('mcp_servers.json', encoding='utf-8') as f:
            mcp_config = json.load(f)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config(rules, mcp_config)
        
        return rules, mcp_config
        
    except FileNotFoundError as e:
        logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        raise
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        raise

def validate_config(rules, mcp_config):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ rules.json
    required_fields = ['role', 'language', 'rules']
    for field in required_fields:
        if field not in rules:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}' –≤ rules.json")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
    if 'mcpServers' not in mcp_config:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'mcpServers' –≤ mcp_servers.json")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    active_servers = [name for name, config in mcp_config['mcpServers'].items() 
                     if config.get('enabled', True)]
    
    if not active_servers:
        logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
    else:
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã: {', '.join(active_servers)}")

def create_llm():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ GigaChat LLM —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    credentials = os.getenv('GIGACHAT_CREDENTIALS')
    if not credentials:
        raise ValueError("GIGACHAT_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat LLM...")
    
    return GigaChat(
        credentials=credentials,
        scope=os.getenv('GIGACHAT_SCOPE', 'GIGACHAT_API_PERS'),
        verify_ssl_certs=False,
        model=os.getenv('GIGACHAT_MODEL', 'GigaChat'),
        temperature=float(os.getenv('GIGACHAT_TEMPERATURE', '0.1')),
        max_tokens=int(os.getenv('GIGACHAT_MAX_TOKENS', '2048'))
    )

def get_mcp_servers(mcp_config):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    servers = {}
    for name, config in mcp_config['mcpServers'].items():
        if config.get('enabled', True):
            servers[name] = config
    return servers

def create_system_prompt(rules):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    base_prompt = rules['role']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
    if 'rules' in rules:
        rules_text = "\n".join([f"- {rule}" for rule in rules['rules']])
        base_prompt += f"\n\n–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã:\n{rules_text}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º workflow –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'workflows' in rules:
        workflows_text = ""
        for workflow_name, steps in rules['workflows'].items():
            steps_text = "\n".join([f"  {step}" for step in steps])
            workflows_text += f"\n\n{workflow_name.replace('_', ' ').title()}:\n{steps_text}"
        base_prompt += f"\n\n–†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:{workflows_text}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    if 'personality' in rules:
        personality = rules['personality']
        base_prompt += f"\n\n–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {personality.get('style', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π')}"
        base_prompt += f"\n–¢–æ–Ω: {personality.get('tone', '–ø–æ–º–æ–≥–∞—é—â–∏–π')}"
        base_prompt += f"\n–ü–æ–¥—Ö–æ–¥: {personality.get('approach', '–º–µ—Ç–æ–¥–∏—á–Ω—ã–π')}"
    
    return base_prompt

async def ask_confirmation(message):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\n‚ö†Ô∏è  {message}")
    response = input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    return response in ['–¥–∞', 'yes', 'y', '–¥']

async def initialize_agent():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        rules, mcp_config = load_config()
        llm = create_llm()
        mcp_servers = get_mcp_servers(mcp_config)
        
        if not mcp_servers:
            raise ValueError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º: {list(mcp_servers.keys())}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        timeout = mcp_config.get('settings', {}).get('timeout', 30000) / 1000
        
        client = MultiServerMCPClient(mcp_servers)
        await asyncio.wait_for(client.__aenter__(), timeout=timeout)
        
        tools = await client.get_tools()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tool_names = [tool.name if hasattr(tool, 'name') else str(tool) for tool in tools]
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(tool_names)}")
        
        agent = create_react_agent(llm, tools)
        
        return agent, client, rules
        
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        raise

def print_welcome_message(rules):
    """–ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print("\n" + "="*70)
    print("ü§ñ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ì–ï–ù–¢ –î–û–ö–£–ú–ï–ù–¢–û–û–ë–û–†–û–¢–ê")
    print("="*70)
    
    print(f"\nüë§ –†–æ–ª—å: {rules.get('role', '–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º')}")
    print(f"üåê –Ø–∑—ã–∫: {rules.get('language', '—Ä—É—Å—Å–∫–∏–π')}")
    
    if 'personality' in rules:
        personality = rules['personality']
        print(f"üé≠ –°—Ç–∏–ª—å: {personality.get('style', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π')}")
    
    if 'rules' in rules:
        print(f"\nüìã –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ ({len(rules['rules'])}):")
        for i, rule in enumerate(rules['rules'][:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–∞–≤–∏–ª
            print(f"   {i}. {rule}")
        if len(rules['rules']) > 5:
            print(f"   ... –∏ –µ—â–µ {len(rules['rules']) - 5} –ø—Ä–∞–≤–∏–ª")
    
    if 'examples' in rules and 'greetings' in rules['examples']:
        import random
        greeting = random.choice(rules['examples']['greetings'])
        print(f"\nüí¨ {greeting}")
    
    print("\n" + "="*70)
    print("üí° –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:")
    print("   ‚Ä¢ '–ø–æ–º–æ—â—å' - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    print("   ‚Ä¢ '—Å—Ç–∞—Ç—É—Å' - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ") 
    print("   ‚Ä¢ '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    print("="*70 + "\n")

async def handle_special_commands(user_input, tools):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    command = user_input.lower().strip()
    
    if command in ['–ø–æ–º–æ—â—å', 'help']:
        print("\nüìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω–∞–º")
        print("‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤")  
        print("‚Ä¢ –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞")
        return True
    
    elif command in ['—Å—Ç–∞—Ç—É—Å', 'status']:
        print(f"\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        print(f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
        print(f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%H:%M:%S')}")
        print(f"‚Ä¢ –õ–æ–≥–∏: {os.getenv('LOGS_PATH', './logs')}")
        return True
    
    elif user_input.lower().startswith("–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª"):
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ DOCX-—Ñ–∞–π–ª–∞
        parts = user_input.split(maxsplit=2)
        if len(parts) == 3:
            file_path = parts[2]
        else:
            file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ DOCX-—Ñ–∞–π–ª—É: ").strip()
        tool = next((t for t in tools if hasattr(t, 'name') and t.name == 'read_docx'), None)
        if not tool:
            print("‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á—Ç–µ–Ω–∏—è DOCX –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")
            return False
        try:
            result = await tool.ainvoke({"path": file_path})
            print(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{file_path}':\n{result if isinstance(result, str) else str(result)}\n")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}\n")
        return True
    
    return False

async def run_agent():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    agent = None
    client = None
    
    try:
        agent, client, rules = await initialize_agent()
        print_welcome_message(rules)
        
        system_prompt = create_system_prompt(rules)
        system_message = SystemMessage(content=system_prompt)
        
        messages = [system_message]
        tools = await client.get_tools()
        
        tool_names = [tool.name if hasattr(tool, 'name') else str(tool) for tool in tools]
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(tool_names)}")
        
        while True:
            try:
                user_input = input("üë§ –í—ã: ").strip()
                
                if user_input.lower() in ["–≤—ã—Ö–æ–¥", "exit", "quit", "q"]:
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏!")
                    break
                
                if not user_input:
                    continue
                
                if await handle_special_commands(user_input, tools):
                    continue
                
                # –Ø–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –¥–æ–∫–ª–∞–¥–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏
                keywords = ["–¥–æ–∫–ª–∞–¥–Ω–∞—è", "–∑–∞–ø–∏—Å–∫–∞"]
                if any(word in user_input.lower() for word in keywords):
                    print("\nüìù –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫–ª–∞–¥–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏.")
                    # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω
                    main_text = input("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–∫–ª–∞–¥–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏: ").strip()
                    if not main_text:
                        print("‚ùó –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n")
                        continue
                    # –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É –∏ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
                    template_path = os.path.join("templates", "–¥–æ–∫–ª–∞–¥–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞.docx")
                    output_path = os.path.join("output", f"–¥–æ–∫–ª–∞–¥–Ω–∞—è_–∑–∞–ø–∏—Å–∫–∞_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx")
                    context = {"text": main_text}
                    # –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ docx
                    tool = next((t for t in tools if hasattr(t, 'name') and t.name == 'generate_docx'), None)
                    if not tool:
                        print("‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")
                        continue
                    # –í—ã–∑–æ–≤ MCP-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    try:
                        result = await tool.ainvoke({
                            "path_template": template_path,
                            "context": context,
                            "output_path": output_path
                        })
                        print(f"\n‚úÖ {result if isinstance(result, str) else '–î–æ–∫–ª–∞–¥–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.'}\n")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫–ª–∞–¥–Ω–æ–π: {e}\n")
                    continue
                
                messages.append(HumanMessage(content=user_input))
                print("\nü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...")
                
                response = await asyncio.wait_for(
                    agent.ainvoke({"messages": messages}),
                    timeout=60
                )
                
                if hasattr(response['messages'][-1], 'content'):
                    reply = response['messages'][-1].content
                else:
                    reply = str(response['messages'][-1])
                
                print(f"\nü§ñ –ê–≥–µ–Ω—Ç: {reply}")
                print("\n" + "-"*50 + "\n")
                
                messages.append(response['messages'][-1])
                
            except asyncio.TimeoutError:
                print("‚è∞ –ó–∞–ø—Ä–æ—Å –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É.")
            except KeyboardInterrupt:
                print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≥–µ–Ω—Ç–∞: {e}")
                print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n")
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    finally:
        if client:
            try:
                await client.__aexit__(None, None, None)
                logger.info("MCP –∫–ª–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞: {e}")

if __name__ == "__main__":
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
        asyncio.run(run_agent())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")