import os
import asyncio
import logging
from dotenv import load_dotenv
from langchain_gigachat.chat_models import GigaChat
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_mcp_adapters.client import MultiServerMCPClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è LLM
def create_llm():
    credentials = os.getenv('GIGACHAT_CREDENTIALS')
    if not credentials:
        raise ValueError("GIGACHAT_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat LLM...")
    return GigaChat(
        credentials=credentials,
        scope=os.getenv('GIGACHAT_SCOPE', 'GIGACHAT_API_PERS'),
        verify_ssl_certs=False,
        model=os.getenv('GIGACHAT_MODEL', 'GigaChat'),
        temperature=float(os.getenv('GIGACHAT_TEMPERATURE', '0.1')),
        max_tokens=int(os.getenv('GIGACHAT_MAX_TOKENS', '2048'))
    )

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è fs-mcp
FS_MCP_CONFIG = {
    "fs-mcp": {
        "command": "python",
        "args": ["mcp_modules/fs_mcp.py"],
        "enabled": True,
        "cwd": ".",
        "env": {},
        "description": "–§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —Å–æ–∑–¥–∞–Ω–∏–µ, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫",
        "autoApprove": [],
        "transport": "stdio"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
async def run_llm_fs_agent():
    llm = create_llm()
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ fs-mcp
    client = MultiServerMCPClient(FS_MCP_CONFIG)
    tools = await client.get_tools(server_name="fs-mcp")
    # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
    tools_dict = {tool.name: tool for tool in tools}

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    print("\n" + "="*70)
    print("ü§ñ LLM+FS MCP –ê–ì–ï–ù–¢ (GigaChat + —Ñ–∞–π–ª–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)")
    print("="*70)
    print("\nüí° –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:")
    print("   ‚Ä¢ '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    print("   ‚Ä¢ MCP-–∫–æ–º–∞–Ω–¥—ã: '–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã', '—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª', '—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É', '—É–¥–∞–ª–∏ —Ñ–∞–π–ª', ...")
    print("="*70 + "\n")

    messages = []
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
    # system_message = SystemMessage(content="–í—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.")
    # messages.append(system_message)

    while True:
        try:
            user_input = input("üë§ –í—ã: ").strip()
            if user_input.lower() in ["–≤—ã—Ö–æ–¥", "exit", "quit", "q"]:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã!")
                break
            if not user_input:
                continue

            # --- MCP: –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥ ---
            # –ü—Ä–∏–º–µ—Ä: "–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã [–ø–∞–ø–∫–∞]"
            if user_input.lower().startswith("–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã"):
                parts = user_input.split(maxsplit=2)
                directory = parts[2] if len(parts) > 2 else "."
                tool = tools_dict.get("list_files")
                if tool:
                    result = await tool.ainvoke({"directory": directory})
                    print(f"\nüìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ '{directory}':\n{result}\n")
                else:
                    print("‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç list_files –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue
            # –ü—Ä–∏–º–µ—Ä: "—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É [–∏–º—è]"
            if user_input.lower().startswith("—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É"):
                parts = user_input.split(maxsplit=2)
                if len(parts) < 3:
                    print("‚ùó –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏.")
                    continue
                folder_path = parts[2]
                tool = tools_dict.get("create_folder")
                if tool:
                    result = await tool.ainvoke({"folder_path": folder_path})
                    print(f"\nüìÅ {result}\n")
                else:
                    print("‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç create_folder –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue
            # –ü—Ä–∏–º–µ—Ä: "—É–¥–∞–ª–∏ —Ñ–∞–π–ª [–∏–º—è]"
            if user_input.lower().startswith("—É–¥–∞–ª–∏ —Ñ–∞–π–ª"):
                parts = user_input.split(maxsplit=2)
                if len(parts) < 3:
                    print("‚ùó –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞.")
                    continue
                filename = parts[2]
                tool = tools_dict.get("delete_file")
                if tool:
                    result = await tool.ainvoke({"filename": filename})
                    print(f"\nüóëÔ∏è {result}\n")
                else:
                    print("‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç delete_file –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue
            # –ü—Ä–∏–º–µ—Ä: "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª [–∏–º—è] [—Ç–µ–∫—Å—Ç]"
            if user_input.lower().startswith("—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª"):
                parts = user_input.split(maxsplit=2)
                if len(parts) < 3:
                    print("‚ùó –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Ç–µ–∫—Å—Ç.")
                    continue
                filename_and_text = parts[2].split(maxsplit=1)
                filename = filename_and_text[0]
                text = filename_and_text[1] if len(filename_and_text) > 1 else ""
                tool = tools_dict.get("create_docx")
                if tool:
                    result = await tool.ainvoke({"filename": filename, "text": text})
                    print(f"\nüìÑ {result}\n")
                else:
                    print("‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç create_docx –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue
            # --- /MCP ---

            # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
            messages.append(HumanMessage(content=user_input))
            print("\nü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...")
            response = await asyncio.wait_for(
                llm.ainvoke(messages),
                timeout=60
            )
            if hasattr(response, 'content'):
                reply = response.content
            else:
                reply = str(response)
            print(f"\nü§ñ –ê–≥–µ–Ω—Ç: {reply}")
            print("\n" + "-"*50 + "\n")
            messages.append(response)
        except asyncio.TimeoutError:
            print("‚è∞ –ó–∞–ø—Ä–æ—Å –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É.")
        except KeyboardInterrupt:
            print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≥–µ–Ω—Ç–∞: {e}")
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n")

def get_mcp_servers(mcp_config):
    servers = {}
    for name, config in mcp_config['mcpServers'].items():
        if config.get('enabled', True):
            servers[name] = config
    return servers

if __name__ == "__main__":
    try:
        asyncio.run(run_llm_fs_agent())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.") 