# MCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –±–∞–∑–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å —Ñ–∞–π–ª–∞–º–∏/–ø–∞–ø–∫–∞–º–∏
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç context7-mcp
from context7.mcp.server.fastmcp import FastMCP
import os
import shutil
from docx import Document
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP
mcp = FastMCP("FSManager")

@mcp.tool()
def create_docx(filename: str, text: str = "") -> str:
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π DOCX –¥–æ–∫—É–º–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞ (—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .docx)
        text: –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    """
    try:
        doc = Document()
        if text:
            doc.add_paragraph(text)
        doc.save(filename)
        return f"‚úÖ DOCX —Ñ–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DOCX: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DOCX: {e}"

@mcp.tool()
def list_files(directory: str = ".") -> str:
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    Args:
        directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Returns:
        –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    """
    try:
        files = os.listdir(directory)
        if not files:
            return f"üìÅ –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{directory}' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤."
        return "\n".join(files)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

@mcp.tool()
def copy_file(source: str, destination: str) -> str:
    """
    –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É.
    Args:
        source: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        destination: –ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–ø–∞–ø–∫–∞ –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å)
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    """
    try:
        if os.path.isdir(destination):
            dest_path = os.path.join(destination, os.path.basename(source))
        else:
            dest_path = destination
        shutil.copy2(source, dest_path)
        return f"‚úÖ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ '{dest_path}'."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"

@mcp.tool()
def move_file(source: str, destination: str) -> str:
    """
    –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –≤ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É.
    Args:
        source: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        destination: –ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–ø–∞–ø–∫–∞ –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å)
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    """
    try:
        if os.path.isdir(destination):
            dest_path = os.path.join(destination, os.path.basename(source))
        else:
            dest_path = destination
        shutil.move(source, dest_path)
        return f"‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ '{dest_path}'."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"

@mcp.tool()
def create_folder(folder_path: str) -> str:
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É.
    Args:
        folder_path: –ü—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    """
    try:
        os.makedirs(folder_path, exist_ok=True)
        return f"‚úÖ –ü–∞–ø–∫–∞ '{folder_path}' —Å–æ–∑–¥–∞–Ω–∞."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}"

@mcp.tool()
def delete_folder(folder_path: str) -> str:
    """
    –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –∏ –≤—Å—ë –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
    Args:
        folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    """
    try:
        shutil.rmtree(folder_path)
        return f"‚úÖ –ü–∞–ø–∫–∞ '{folder_path}' —É–¥–∞–ª–µ–Ω–∞."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}"

@mcp.tool()
def delete_file(filename: str) -> str:
    """
    –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª.
    Args:
        filename: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    """
    try:
        os.remove(filename)
        return f"‚úÖ –§–∞–π–ª '{filename}' —É–¥–∞–ª—ë–Ω."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ MCP-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ MCP-—Å–µ—Ä–≤–µ—Ä–∞ FSManager...")
    mcp.run(transport="stdio") 